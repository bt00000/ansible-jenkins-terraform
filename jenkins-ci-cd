pipeline {
    agent any  

    environment {
        AWS_REGION = 'us-east-1'  
        SSH_KEY_PATH = '/var/lib/jenkins/.ssh/id_rsa'  
        JENKINS_URL = "${env.JENKINS_URL}"
        NGINX_URL = "${env.NGINX_URL}"
        JENKINS_USER = 'bt'  // Your Jenkins username
        JENKINS_API_TOKEN = "${env.JENKINS_API_TOKEN}"  // Store API token as an env variable
    }

    stages {
        stage('Check Terraform Installation') {
            steps {
                echo 'Checking Terraform...'
                sh 'terraform version'
            }
        }

        stage('Clone Repository') {
            steps {
                echo 'Cloning repository...'
                git branch: 'main', url: 'https://github.com/bt00000/ansible-jenkins-terraform.git'
            }
        }

        stage('Terraform Init & Apply') {
            steps {
                echo 'Running Terraform...'
                sh '''
                terraform init
                terraform apply -var=ssh_public_key=${SSH_KEY_PATH}.pub -auto-approve
                '''
            }
        }

        stage('Fetch Jenkins Instance IP') {
            steps {
                script {
                    def terraformOutput = sh(script: "terraform output -raw instance_public_ip", returnStdout: true).trim()
                    env.JENKINS_SERVER_IP = terraformOutput
                    echo "Jenkins Server IP retrieved."
                }
            }
        }

        stage('Wait for Instance to be Ready') {
            steps {
                echo 'Waiting for Jenkins instance to be ready...'
                sh 'sleep 30'
            }
        }

        stage('Install Dependencies') {
            steps {
                echo 'Installing dependencies for testing and security scans...'
                sh '''
                sudo apt update -y
                sudo apt install -y python3 python3-pip snapd
                sudo snap install trivy
                pip install --user --no-cache-dir --upgrade pip pytest bandit
                '''
            }
        }

        stage('Install Ansible on Jenkins') {
            steps {
                echo 'Installing Ansible on Jenkins...'
                sh '''
                if ! command -v ansible &> /dev/null; then
                    sudo apt update -y
                    sudo DEBIAN_FRONTEND=noninteractive apt install -y ansible
                else
                    echo "Ansible is already installed."
                fi
                '''
            }
        }

        stage('Create Inventory File') {
            steps {
                echo 'Creating inventory file...'
                sh """
                echo '[jenkins]' > inventory.ini
                echo '${JENKINS_SERVER_IP} ansible_user=ubuntu ansible_ssh_private_key_file=/var/lib/jenkins/.ssh/id_rsa ansible_ssh_common_args="-o StrictHostKeyChecking=no"' >> inventory.ini
                """
            }
        }

        stage('Ansible Configuration') {
            steps {
                echo 'Running Ansible to configure Jenkins & Nginx...'
                sh """
                if ! curl -s http://${JENKINS_SERVER_IP}:8080; then
                    echo "Jenkins is not running. Running Ansible Playbook to configure Jenkins & deploy app."
                    sudo ansible-playbook -i inventory.ini install_jenkins.yml
                else
                    echo "Jenkins is already running. Skipping Jenkins setup, but configuring Nginx..."
                    sudo ansible-playbook -i inventory.ini install_jenkins.yml --tags nginx
                fi
                """
            }
        }

        stage('Run Automated Tests') {
            steps {
                script {
                    def testExists = sh(script: "[ -d tests ] && echo 'yes' || echo 'no'", returnStdout: true).trim()
                    if (testExists == 'yes') {
                        echo 'Running automated tests...'
                        sh '''
                        export JENKINS_URL=${JENKINS_URL}
                        export NGINX_URL=${NGINX_URL}
                        export JENKINS_USER=${JENKINS_USER}
                        export JENKINS_API_TOKEN=${JENKINS_API_TOKEN}
                        python3 -m pytest tests/ --maxfail=5 --disable-warnings --tb=short || echo "Tests failed but continuing"
                        '''
                    } else {
                        echo "No tests directory found. Skipping tests."
                    }
                }
            }
        }

        stage('Run Security Scan (Bandit)') {
            steps {
                echo 'Running security scan using Bandit...'
                sh '''
                bandit -r .
                '''
            }
        }

        stage('Run Security Scan (Trivy)') {
            steps {
                echo 'Running security scan using Trivy...'
                sh '''
                trivy filesystem --severity HIGH,CRITICAL .
                '''
            }
        }

        stage('Application Deployment') {
            steps {
                echo 'Deploying Application...'
                sh 'echo "Simulating deployment..."'
            }
        }
    }

    post {
        success {
            echo 'Deployment Successful!'
        }
        failure {
            echo 'Deployment Failed! Check logs.'
        }
    }
}
